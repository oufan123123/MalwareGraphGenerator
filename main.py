import os
import time
import sys
import shutil
import networkx as nx
# import matplotlib.pyplot as plt
from networkx.algorithms import isomorphism
from method_generator import gen_call_graph
from sensitive_api import gen_api
from gen_sen_graph import gen_sen_graph
from gen_feature_subgraph import gen_feature_subgraph
from class_generator import analyse_all_smali_file


def get_feature(sfcg, feature_subgraph_list):
    result_str = ""
    for feature_subgraph in feature_subgraph_list:
        matcher = isomorphism.DiGraphMatcher(sfcg, feature_subgraph)
        if matcher.subgraph_is_isomorphic():
            result_str += "1,"
        else:
            result_str += "0,"
    print(result_str)
    return result_str

# 生成所有apk的函数调用图
def generate_all_apks_method_graph(apk_directory_path):
    sfcg_list = []
    try:
        my_abs_path = apk_directory_path.resolve()
    except FileNotFoundError:
        # 不存在
        print("file or dir not exist")
        return
    else:
        typeApkFiles = os.listdir(apk_directory_path)
        for typeApkFile in typeApkFiles:
            print(typeApkFile)
            smali_loc = apk_directory_path + '\\' + typeApkFile
            sfcg_list.append(generate_apk_method_graph(smali_loc))

# 生成单个apk的函数调用图
def generate_apk_method_graph(smali_loc):
    # 生成函数调用图
    sfcg = gen_call_graph(smali_loc)
    # nx.write_gexf(sfcg, '.\\data\\' + type + 'ApkGexf\\{}.gexf'.format(typeApkFile))
    print("generating fcg graph over")
    return sfcg

# 生成所有apk的类调用图
def generate_all_apks_class_graph(apk_directory_path):
    ccg_list = []
    try:
        my_abs_path = apk_directory_path.resolve()
    except FileNotFoundError:
        # 不存在
        print("file or dir not exist")
        return
    else:
        typeApkFiles = os.listdir(apk_directory_path)
        for typeApkFile in typeApkFiles:
            print(typeApkFile)
            smali_loc = apk_directory_path + '\\' + typeApkFile
            ccg_list.append(generate_apk_class_graph(smali_loc))

# 生成单个apk的类调用图
def generate_apk_class_graph(smali_loc):
    graph, smali_class_dict = analyse_all_smali_file(smali_loc)
    # nx.write_gexf(sfcg, '.\\data\\' + type + 'ApkGexf\\{}.gexf'.format(typeApkFile))
    return graph

# 生成所有apk的activity图
def generate_all_apks_activity_graph(apk_directory_path):
    acg_list = []
    try:
        my_abs_path = apk_directory_path.resolve()
    except FileNotFoundError:
        # 不存在
        print("file or dir not exist")
        return
    else:
        typeApkFiles = os.listdir(apk_directory_path)
        for typeApkFile in typeApkFiles:
            print(typeApkFile)
            smali_loc = apk_directory_path + '\\' + typeApkFile
            acg_list.append(generate_apk_activity_graph(smali_loc))

# 生成单个apk的activity图
def generate_apk_activity_graph(smali_loc):
    activity_graph = analyse_all_smali_file(smali_loc)
    return activity_graph

if __name__ == '__main__':
    apk_directory_path = ""
    apk_path = ""

