import networkx as nx


'''
生成三点特征子图13个，四点特征子图26个
'''
def gen_feature_subgraph():
    subgraph_list = []
    # 3点_2边
    edge_list_1 = [(1,2), (2, 1), (1, 2, 2, 1)]
    edge_list_2 = [(2,3), (3, 2), (2, 3, 3, 2)]
    three_two_subgraph_list = get_two_edge_subgraph(edge_list_1, edge_list_2)
    subgraph_list.extend(three_two_subgraph_list)

    # 3点_3边
    edge_list_1 = [(1, 2), (2, 1), (1, 2, 2, 1)]
    edge_list_2 = [(2, 3), (3, 2), (2, 3, 3, 2)]
    edge_list_3 = [(1, 3), (3, 1), (1, 3, 3, 1)]
    three_three_subgraph_list = get_three_edge_subgraph(edge_list_1, edge_list_2, edge_list_3)
    subgraph_list.extend(three_three_subgraph_list)

    # 4点_3边
    edge_list_1 = [(1, 2), (2, 1), (1, 2, 2, 1)]
    edge_list_2 = [(2, 3), (3, 2), (2, 3, 3, 2)]
    edge_list_3 = [(3, 4), (4, 3), (3, 4, 4, 3)]
    four_three_subgraph_list = get_three_edge_subgraph(edge_list_1, edge_list_2, edge_list_3)
    subgraph_list.extend(four_three_subgraph_list)

    # 4点_4边 用论文中的
    edge_list = [(2, 1), (3, 1), (3, 2), (3, 4)]
    four_four_graph_1 = get_graph_from_edge(edge_list)
    subgraph_list.append(four_four_graph_1)

    edge_list = [(1, 3), (2, 1), (2, 3), (4, 3)]
    four_four_graph_2 = get_graph_from_edge(edge_list)
    subgraph_list.append(four_four_graph_2)

    edge_list = [(1, 3), (2, 1), (2, 3), (3, 4)]
    four_four_graph_3 = get_graph_from_edge(edge_list)
    subgraph_list.append(four_four_graph_3)

    edge_list = [(2, 1), (3, 1), (3, 2), (4, 3)]
    four_four_graph_4 = get_graph_from_edge(edge_list)
    subgraph_list.append(four_four_graph_4)

    edge_list = [(2, 1), (3, 1), (2, 3), (3, 4)]
    four_four_graph_5 = get_graph_from_edge(edge_list)
    subgraph_list.append(four_four_graph_5)

    edge_list = [(2, 1), (3, 1), (2, 3), (4, 3)]
    four_four_graph_6 = get_graph_from_edge(edge_list)
    subgraph_list.append(four_four_graph_6)

    edge_list = [(2, 1), (3, 2), (3, 4), (4, 1)]
    four_four_graph_7 = get_graph_from_edge(edge_list)
    subgraph_list.append(four_four_graph_7)

    edge_list = [(1, 2), (3, 2), (3, 4), (1, 4)]
    four_four_graph_8 = get_graph_from_edge(edge_list)
    subgraph_list.append(four_four_graph_8)

    edge_list = [(2, 1), (3, 2), (3, 1), (3, 4), (1, 4)]
    four_five_graph_1 = get_graph_from_edge(edge_list)
    subgraph_list.append(four_five_graph_1)

    edge_list = [(1, 2), (1, 4), (3, 2), (3, 1), (3, 4)]
    four_five_graph_2 = get_graph_from_edge(edge_list)
    subgraph_list.append(four_five_graph_2)

    edge_list = [(1, 2), (1, 4), (2, 4), (3, 2), (3, 4)]
    four_five_graph_3 = get_graph_from_edge(edge_list)
    subgraph_list.append(four_five_graph_3)

    for subgraph in subgraph_list:
        print(subgraph.edges())

    return subgraph_list

def get_graph_from_edge(edge_list):
    graph = nx.DiGraph()
    for edge in edge_list:
        graph.add_edge(edge[0], edge[1])
    return graph



def get_two_edge_subgraph(edge_list_1, edge_list_2):
    subgraph_list = []
    for i in range(0, 3):
        for j in range(0, 3):
            graph = nx.DiGraph()
            if i != 2:
                graph.add_edge(edge_list_1[i][0], edge_list_1[i][1])
            else:
                graph.add_edge(edge_list_1[i][0], edge_list_1[i][1])
                graph.add_edge(edge_list_1[i][2], edge_list_1[i][3])

            if j != 2:
                graph.add_edge(edge_list_2[j][0], edge_list_2[j][1])
            else:
                graph.add_edge(edge_list_2[j][0], edge_list_2[j][1])
                graph.add_edge(edge_list_2[j][2], edge_list_2[j][3])
            if not is_iso(graph, subgraph_list):
                subgraph_list.append(graph)
                # print(graph.edges())
    return subgraph_list

def get_three_edge_subgraph(edge_list_1, edge_list_2, edge_list_3):
    subgraph_list = []
    for i in range(0, 3):
        for j in range(0, 3):
            for x in range(0, 3):
                graph = nx.DiGraph()
                if i != 2:
                    graph.add_edge(edge_list_1[i][0], edge_list_1[i][1])
                else:
                    graph.add_edge(edge_list_1[i][0], edge_list_1[i][1])
                    graph.add_edge(edge_list_1[i][2], edge_list_1[i][3])

                if j != 2:
                    graph.add_edge(edge_list_2[j][0], edge_list_2[j][1])
                else:
                    graph.add_edge(edge_list_2[j][0], edge_list_2[j][1])
                    graph.add_edge(edge_list_2[j][2], edge_list_2[j][3])

                if x != 2:
                    graph.add_edge(edge_list_3[x][0], edge_list_3[x][1])
                else:
                    graph.add_edge(edge_list_3[x][0], edge_list_3[x][1])
                    graph.add_edge(edge_list_3[x][2], edge_list_3[x][3])


                if not is_iso(graph, subgraph_list):
                    subgraph_list.append(graph)
                    # print(graph.edges())
    return subgraph_list


def is_iso(graph, subgraph_list):
    for subgraph in subgraph_list:
        if nx.is_isomorphic(graph, subgraph):
            return True
    return False

if __name__ == '__main__':
    gen_feature_subgraph()