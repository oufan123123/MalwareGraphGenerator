import fnmatch
import os
import networkx as nx

'''
生成apk每个函数的所有行
'''

def gen_method_lines(smali_loc):
    method_dict = {}
    all_decode_file = os.listdir(smali_loc)
    for f in all_decode_file:
        if f == 'smali':
            path = smali_loc + '\\smali'
            for dirpath, dirs, files in os.walk(path):
                for filename in fnmatch.filter(files, '*.smali'):
                    find_method(dirpath + '\\' + filename, method_dict)
    return method_dict


# 找到所有的函数调用关系
def find_method(smali_file, method_dict):
    try:
        f = open(smali_file, 'r', encoding='UTF-8')
        caller_class = ''
        caller_method = ''
        method_line_list = None
        for line in f:
            line = line.strip().replace("\n", "")
            line_list = line.strip().split(' ')
            # 找到类名
            if line.startswith(".class") and len(line_list)> 1:
                caller_class = line_list[len(line_list) - 1]
            # 找到函数
            elif line.startswith(".method") and len(line_list)> 1:
                caller_method = caller_class + "->" + line_list[len(line_list) - 1]
                method_line_list = []
                method_dict[caller_method] = method_line_list
                # print("caller_method:"+caller_method)
            elif line.startswith(".end method"):
                method_line_list = None
                caller_method = ''
            elif method_line_list is not None and caller_method != '':
                method_line_list.append(line)

        f.close()
    except FileNotFoundError:
        pass
