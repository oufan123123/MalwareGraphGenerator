import os
import fnmatch
import networkx as nx

'''
用于活动图生成，主要以寻找intent传播路径实现
'''

# 获取这行中的类所在的寄存器
def get_class_register(line_list):
    intent_register = ''
    class_register = ''
    for line_element in line_list:
        if '{' in line_element:
            intent_register = line_element.replace('{', '').replace(',', '')
        elif '},' in line_element:
            class_register = line_element.replace('},', '')
    return intent_register, class_register





# 分析一个smali文件，看是否存在对应的key值，判断其对应的view
def analyse_smali_file(smali_file_path):
    f = open(smali_file_path, 'r', encoding='UTF-8')

    activity = ''

    view_key = ''

    # 以const申明的寄存器与对应变量的一一对应字典
    register_dict = {}

    # 存intent的寄存器与调用的activity的对应关系，用于copy的intent找到合适的activity
    intent_dict = {}

    child_activity_list = []

    for line in f:

        line = line.strip()
        line_list = line.strip().split(' ')

        # 找到activity
        if line.startswith(".class"):
            activity = line_list[len(line_list) - 1]
            if check_is_ad(activity):
                view_key = ''
                break
            continue

        # 存寄存器字典
        if len(line_list) > 0 and line_list[0].startswith('const'):
            register = line_list[1].replace(',', '')
            register_dict[register] = line_list[2]

        # 找到setContentview或者addPreferencesFromResource
        if line.startswith('invoke') and (line.find(';->setContentView(I)V') > 0 or line.find(';->addPreferencesFromResource(I)V') > 0):
            register = ''
            if '},' in line_list[2]:
                register = line_list[2].replace('},', '')
                # print(activity + '找到了viewkey:' + line + " :" + view_key)
                if not register in register_dict:
                    view_key = ''
                    break
                view_key = register_dict[register]
                # print(activity+'找到了viewkey:'+line+" :"+view_key)
            else:
                print(activity+'格式不正确:'+line)
            if not register in register_dict:
                # print(activity+"没找到对应view的key存储的寄存器："+line)
                break

        # 分析intent的activity switch部分
        if 'Landroid/content/Intent;' in line:

            # 第一种情况，intent刚申明
            if line.startswith('new-instance') and 'Landroid/content/Intent;' == line_list[2]:
                intent_register = line_list[1].replace(',', '')
                intent_dict[intent_register] = ''
                # print(activity + 'intent申明:' + line)


            # 第二种情况，对应论文中第五第六种情况
            if line.startswith('invoke') and 'Landroid/content/Intent;-><init>' in line and 'Ljava/lang/Class;' in line:
                intent_register, class_register = get_class_register(line_list)

                if not class_register in register_dict or not intent_register in intent_dict:
                    print(activity+'类中 '+line+'不存在intent要switch的类')
                else:
                    if check_is_ad(register_dict[class_register]):
                        continue
                    child_activity_list.append(register_dict[class_register])
                    intent_dict[intent_register] = register_dict[class_register]
                # print(activity + 'intent56:' + line + " :" + intent_register + " :" + register_dict[class_register])

            # 第三种情况，对应论文中第一种情况
            elif line.startswith('invoke') and 'Landroid/content/Intent;->setClass(' in line:
                intent_register, class_register = get_class_register(line_list)
                if not class_register in register_dict or not intent_register in intent_dict:
                    print(activity+'类中 '+line+'不存在intent要switch的类')
                else:
                    if check_is_ad(register_dict[class_register]):
                        continue
                    child_activity_list.append(register_dict[class_register])
                    intent_dict[intent_register] = register_dict[class_register]
                # print(activity + 'intent1:' + line + " :" + intent_register + " :" + register_dict[class_register])

            # 第四种情况，对应论文第二种情况
            elif line.startswith('invoke') and 'Landroid/content/Intent;-><init>(Landroid/content/Intent;)' in line:
                copyer_intent_register, copyee_intent_register = get_class_register(line_list)
                if not copyer_intent_register in intent_dict or not copyee_intent_register in intent_dict:
                    print(activity + '类中 ' + line + '不存在intent要switch的类')
                else:
                    if check_is_ad(intent_dict[copyer_intent_register]):
                        continue
                    child_activity_list.append(intent_dict[copyer_intent_register])
                    intent_dict[copyee_intent_register] = intent_dict[copyer_intent_register]
                    # print(activity + 'intent2:' + line + " :" + intent_dict[copyer_intent_register] + " :" + intent_dict[copyer_intent_register])


    return view_key, activity, child_activity_list


# 将边加入活动图
def addEdgeToGraph(activity, child_activity_list, graph):
    print("addEdge")
    for child_activity in child_activity_list:
        print(activity+"->"+child_activity)
        graph.add_edge(activity, child_activity)


def check_is_ad(activity):
    if activity.startswith('Lcom/google/ads'):
        return True

    elif activity.startswith('Lcom/admob/android'):
        return True

    elif activity.startswith('Lcom/umeng'):
        return True

    elif activity.startswith('Lcom/inmobi'):
        return True

    elif activity.startswith('LLcom/yume'):
        return True

    elif activity.startswith('Lcom/adview'):
        return True

    elif activity.startswith('Lcom/kiwi/ads'):
        return True

    elif activity.startswith('Lcom/pontilex'):
        return True

    elif activity.startswith('Lcom/adsdk'):
        return True

    elif activity.startswith('Lcom/gfan/sdk'):
        return True

    elif activity.startswith('Lcom/facebook'):
        return True
    else:
        return False




    # 分析smali文件夹，得到一个图
def analyse_all_smali_file(smali_dir_path):
    graph = nx.DiGraph()
    all_decode_file = os.listdir(smali_dir_path)
    for f in all_decode_file:
        if f == 'smali':
            path = smali_dir_path + '\\smali'
            for dirpath, dirs, files in os.walk(path):
                for filename in fnmatch.filter(files, '*.smali'):
                    view_key, activity, child_activity_list = analyse_smali_file(dirpath + '\\' + filename)
                    if view_key != '':
                        addEdgeToGraph(activity, child_activity_list, graph)
    return graph





