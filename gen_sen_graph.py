import networkx as nx

'''
根据敏感API和FCG剪枝，生成敏感FCG图
'''
def find_neighbors(G, api):
    first = list(G.neighbors(api))
    second = []
    for node in first:
        second = list(set(second) | set(G.neighbors(node)))
    result = list(set(first) | set(second))
    if api not in result:
        result.append(api)
    return result


def make_graph(sfcg, adj):
    H = nx.DiGraph()
    if len(adj) == 1:
        H.add_node(adj[0])
        return H
    for i in range(0, len(adj)):
        for j in range(i + 1, len(adj)):
            if not H.has_node(adj[i]):
                H.add_node(adj[i])
            if not H.has_node(adj[j]):
                H.add_node(adj[j])
            if sfcg.has_edge(adj[i], adj[j]):
                H.add_edge(adj[i], adj[j])
            elif sfcg.has_edge(adj[j], adj[i]):
                H.add_edge(adj[j], adj[i])
    return H


def remove_lib_nodes(nodes):
    lib = []
    f = open('.\\data\\libd.txt', 'r')
    for line in f:
        line = line.strip().replace("\n", "")
        lib.append(line)
    f.close()

    to_remove = []
    for node in nodes:
        for tpl in lib:
            if node.find(tpl) == 0 and node[len(tpl)] == '/':
                to_remove.append(node)
    return list(set(nodes) - set(to_remove))



def gen_sen_graph(sfcg, api_used):
    G = nx.Graph(sfcg)
    adj_list = []
    for api in api_used:
        # 先找到敏感API周围的节点
        adj = find_neighbors(G, api)
        # 移除第三方库
        filter_adj = remove_lib_nodes(adj)
        adj_list.extend(filter_adj)
    sen_sfcg = make_graph(sfcg, adj_list)
    return sen_sfcg
