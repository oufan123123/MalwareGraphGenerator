import os
import fnmatch
import networkx as nx
from smali_class import SmaliClass


'''
用于类图生成
同时可以分析生成每个类的入度出度，参数个数，函数个数
'''

# 找到调用类
def get_invoke_class(string):
    invoke_class = ''
    if string.find(";->") > 0:
        invoke_class = string[:string.find("->")]
    return invoke_class

# 分析一个smali文件，看是否存在对应的key值，判断其对应的view
def analyse_smali_file(smali_file_path):
    f = open(smali_file_path, 'r', encoding='UTF-8')

    class_name = ''
    method_number = 0
    paramter_number = 0
    in_degree = 0
    out_degree = 0

    invoke_class_list = []



    for line in f:

        line = line.strip()
        line_list = line.strip().split(' ')

        # 找到类名
        if line.startswith(".class"):
            class_name = line_list[len(line_list) - 1]
        # 找到参数
        elif line.startswith(".field"):
            paramter_number += 1
        # 找到函数
        elif line.startswith(".method"):
            method_number += 1
        # 找到调用类
        elif line.startswith("invoke-"):
            invoke_class = get_invoke_class(line_list[len(line_list) - 1])
            # 注意不要重复加入相同的调用类，不加入自己
            if invoke_class != '' and invoke_class != class_name and invoke_class not in invoke_class_list:
                out_degree += 1
                invoke_class_list.append(invoke_class)

    smali_class = SmaliClass(class_name, method_number, paramter_number, in_degree, out_degree, invoke_class_list)

    f.close()
    return class_name, smali_class











# 分析入度同时将所有类加入图,注意只加apk有的类作为点
def addEdgeToGraph(smali_class_dict, graph):
    for class_name in list(smali_class_dict.keys()):
        invoke_class_list = smali_class_dict[class_name].invoke_class_list
        for invoke_class_name in invoke_class_list:
            # 这个类存在
            if invoke_class_name in smali_class_dict:
                # 先增加被调用点的入度
                smali_class_dict[invoke_class_name].in_degree += 1
                # 将两个点加入图
                graph.add_edge(class_name, invoke_class_name)



# 分析smali文件夹，得到一个图
def analyse_all_smali_file(smali_dir_path):
    graph = nx.DiGraph()
    all_decode_file = os.listdir(smali_dir_path)
    smali_class_dict = {}

    # 分析所有smali文件
    for f in all_decode_file:
        if f == 'smali':
            path = smali_dir_path + '\\smali'
            for dirpath, dirs, files in os.walk(path):
                for filename in fnmatch.filter(files, '*.smali'):
                    class_name, smali_class = analyse_smali_file(dirpath + '\\' + filename)
                    if class_name != '':
                        smali_class_dict[class_name] = smali_class

    # 分析入度同时将所有类加入图
    addEdgeToGraph(smali_class_dict, graph)


    return graph, smali_class_dict





